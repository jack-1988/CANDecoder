//BASE REMOTE FRAME MAKER

module Base_Remote_Frame_Maker(input reset, RX, SP, ERROR, F_ITMSS,
                output wire F_OVRLDw,
                output wire RTRw, IDEw, EDLw, BRSw,
                output wire F_STFw, F_EOFw, F_CRCw, F_IDFw, F_ACK_Dw, F_CRC_Dw,
                output wire [10:0] IDFw,
                output wire [17:0] IDF_exw,
                output wire [3:0] DLCw,
                output wire [14:0] CRCw,
                output wire [6:0] EOFw
               );

	reg [8:0] cont;
	reg [7:0] estado_atual;
	reg F_OVRLD;
   reg RTR, IDE, EDL, BRS;
   reg F_STF, F_EOF, F_CRC, F_IDF, F_ACK_D, F_CRC_D;
   reg [10:0] IDF;
   reg [17:0] IDF_ex;
   reg [3:0] DLC;
   reg [14:0] CRC;
   reg [6:0] EOF;
  
  
  
  	initial F_OVRLD = 1'b1;
	initial cont = 9'd0;
	initial estado_atual = 8'd0;
	initial BRS = 1'b0;
	initial F_CRC = 1'b1;
	initial F_STF = 1'b1;
	initial F_EOF = 1'b1;
	initial F_IDF = 1'b1;
	initial F_ACK_D = 1'b1;
	initial F_CRC_D = 1'b1;
	
	assign F_OVRLDw = F_OVRLD;
   assign RTRw = RTR;
	assign IDEw = IDE;
	assign EDLw = EDL;
	assign BRSw = BRS;
	assign F_STFw = F_STF;
	assign F_EOFw = F_EOF;
	assign F_CRCw = F_CRC;
	assign F_IDFw = F_IDF;
	assign F_ACK_Dw = F_ACK_D;
	assign F_CRC_Dw = F_CRC_D;
	assign IDFw = IDF;
	assign IDF_exw = IDF_ex;
	assign DLCw = DLC;
	assign CRCw = CRC;
	assign EOFw = EOF;
  
parameter sts1 = 0, sts2 = 1, sts3 = 2, sts4 = 3, sts5 = 4, sts_B6 = 5, sts_E6 = 6, sts_BCD7 = 7,
  			sts_BCR7 = 8, sts_BCD8 = 9, sts_BF7 = 10, sts_BF8 = 11, sts_BF9 = 12, sts_BF10 = 13, 
  			sts_BF11 = 14, sts_E7 = 15, sts_E8 = 16, sts_E9 = 17, sts_ECD10 = 18, sts_ECR10 = 19,
  			sts_ECD11 = 20, sts_EF10 = 21, sts_EF11 = 22, sts_EF12 = 23, sts_EF13 = 24, sts_I = 25,
			sts_II = 26, sts_III = 27, sts_IV = 28, sts_V = 29,sts_VI = 30, sts_VII = 31,
			sts_INT = 32, sts_OVL = 33;

  
//always @(posedge SP or posedge reset) begin
always @(posedge SP) begin
	if(reset == 1)begin
		cont <= 9'd0;
		estado_atual <= sts1;
		F_OVRLD <= 1'b1;
		F_STF <= 1'b1;
	end
	else begin
		if(ERROR == 0)begin		//Estou no primeiro bit de ERROR
			cont <= 9'd0;
			estado_atual <= sts_OVL;
			F_OVRLD <= 1'b0;
			F_STF <= 1'b1;
		end
		else
			cont <= cont + 9'd1;
	end

	case(estado_atual)
		sts1: begin		//BUS IDLE
			if (RX == 1'b0)begin	//Já estou no bit de SOF
				F_STF <= 1'b0;
				estado_atual <= sts3;
				cont <= 9'd0;
			end
		end    
		sts3: begin		//IDENTIFIER
			IDF [cont-1] <= RX;
			if (cont >= 9'd11)begin
				estado_atual <= sts4;
				cont <= 9'd0;
			end
		end
		sts4: begin		//RTR
			estado_atual <= sts5;
			cont <= 9'd0;
		end
		sts5: begin		//IDE
			if (RX == 1'b0)begin
				estado_atual <= sts_B6;
			end
			if (RX == 1'b1)begin
				estado_atual <= sts_E6;
			end
			cont <= 9'd0;
		end
		sts_B6: begin		//EDL Base
			if (RX == 1'b0 && RTR == 1'b0)begin
				estado_atual <= sts_BCD7;
			end
			if (RX == 1'b0 && RTR == 1'b1)begin
				estado_atual <= sts_BCR7;
			end
			if (RX == 1'b1)begin
				estado_atual <= sts_BF7;
			end
			cont <= 9'd0;
		end
		sts_E6: begin		//IDENTIFIER EXTENSION EXTENDED
			IDF_ex [cont-1] <= RX;
			if (cont >= 9'd18)begin
				estado_atual <= sts_E7;
				cont <= 9'd0;
			end
		end

	  //---------------Estados de CAN BASE (BC)---------------//

		sts_BCD7: begin		//DLC CAN Data
			DLC [cont-1] <= RX;
			if (cont >= 9'd4)begin
				estado_atual <= sts_BCD8;
				cont <= 9'd0;
			end
		end
		sts_BCR7: begin		//DLC CAN Remote
			DLC [cont-1] <= RX;
			if (cont >= 9'd4)begin
				estado_atual <= sts_I;
				cont <= 9'd0;
			end
		end
		sts_BCD8: begin		//DATA FIELD
		  if (cont >= (DLC*8)-1)begin  //Verificar esta comparação
			estado_atual <= sts_I;
			cont <= 9'd0;
		  end
		end

		//---------------Estados de CAN BASE FD (BF)---------------//

		sts_BF7: begin		//Dummy STATE
			estado_atual <= sts_BF8;
			cont <= 9'd0;
		end
		sts_BF8: begin		//BRS
			estado_atual <= sts_BF9;
			cont <= 9'd0;
		end
		sts_BF9: begin		//ESI
			estado_atual <= sts_BF10;
			cont <= 9'd0;
		end
		sts_BF10: begin		//DLC_FD
			DLC [cont-1] <= RX;
			if (cont >= 9'd4)begin
				estado_atual <= sts_BF11;
				cont <= 9'd0;
			end
		end
		sts_BF11: begin		//DATA_FIELD_FD
		  if (cont >= (DLC*8)-1)begin  //Verificar esta comparação
			estado_atual <= sts_I;
			cont <= 9'd0;
		  end
		end

	  //---------------Estados de CAN EXTENDED (E)---------------//

		sts_E7: begin			//RTR EXTENDED
			estado_atual <= sts_E8;
			cont <= 9'd0;
		end
		sts_E8: begin			//EDL
			estado_atual <= sts_E9;
			cont <= 9'd0;
		end
		sts_E9: begin			//r0
			if(EDL == 1'b1)begin
				estado_atual <= sts_EF10;
			end
			if(EDL == 1'b0 && RTR == 1'b0)begin
				estado_atual <= sts_ECD10;
			end
			if(EDL == 1'b0 && RTR == 1'b1)begin
				estado_atual <= sts_ECR10;
			end
			cont <= 9'd0;
		end

	  //---------------Estados de CAN EXTENDED COMUM (EC)---------------//

		sts_ECD10: begin			//DLC EXTENDED DATA
			DLC [cont-1] <= RX;
			if (cont >= 9'd4)begin
				estado_atual <= sts_ECD11;
				cont <= 9'd0;
			end
		end
		sts_ECR10: begin			//DLC EXTENDED REMOTE
			DLC [cont-1] <= RX;
			if (cont >= 9'd4)begin
				estado_atual <= sts_I;
				cont <= 9'd0;
			end
		end
		sts_ECD11: begin			//DATA FIELD
			if (cont >= (DLC*8)-1)begin  //Verificar esta comparação
				estado_atual <= sts_I;
				cont <= 9'd0;
			end
		end

	  //---------------Estados de CAN EXTENDED FD (EF)---------------//

		sts_EF10: begin			//BRS FD
			estado_atual <= sts_EF11;
			cont <= 9'd0;
		end
		sts_EF11: begin			//ESI_FD
			estado_atual <= sts_EF12;
			cont <= 9'd0;
		end
		sts_EF12: begin			//DLC_FD
			DLC [cont-1] <= RX;
			if(cont>= 9'd3)begin
				estado_atual <= sts_EF13;
				cont <= 9'd0;
			end
		end
		sts_EF13: begin			//DATA_FIELD_FD
			if (cont >= (DLC*8)-1)begin    	
				estado_atual <= sts_I;
				cont <= 9'd0;
			end
		end

	  //---------------Tratando estados finais---------------//
		sts_I:begin			//DATA FIELD LB
			estado_atual <= sts_II;
			cont <= 9'd0;
			F_STF <= 1'b1;
		end
		sts_II: begin		//CRC
			if (cont >= 13)begin
				estado_atual <= sts_III;
				cont <= 9'd0;
			end
		end
		sts_III: begin		//CRC LB
			estado_atual <= sts_IV;
			cont <= 9'd0;
		end
		sts_IV: begin		//CRC Delimiter
			estado_atual <= sts_V;
			cont <= 9'd0;
		end
		sts_V: begin		//ACK
			estado_atual <= sts_VI;
			cont <= 9'd0;
		end
		sts_VI: begin		//ACK Delimiter
			estado_atual <= sts_VII;
			cont <= 9'd0;
		end
		sts_VII: begin		//EOF
			if (cont >= 9'd6)begin
				estado_atual <= sts_INT;
				cont <= 9'd0;
			end
		end
		
	  //---------------Tratando INTERMISSION, ERROR e OVERLOAD---------------//

		sts_INT:begin			//INTERMISSION
			if (RX == 1'b0)begin			//Nesse caso, já estamos no primeiro
				estado_atual <= sts_OVL;	//bit de Overload
				cont <= 9'd0;
				F_OVRLD <= 1'b0;
			end
			if (RX == 1'b1 && cont == 9'd2)begin	//Vou para o BUS IDLE
				estado_atual <= sts1;
				cont <= 9'd0;
			end
		end
		sts_OVL:begin			//OVERLOAD AND ERROR
			F_OVRLD <= 1'b1;
			if (F_ITMSS == 1'b0)begin		//Primeiro bit do INTERMISSON
				if (RX == 1'b0)begin		//Nesse caso, já estamos no primeiro
					estado_atual <= sts_OVL;//bit de Overload
					cont <= 9'd0;
					F_OVRLD <= 1'b0;
				end
				else begin
					estado_atual <= sts1;	//BUS IDLE
					cont <= 9'd0;
				end
			end
		end
	endcase
end
always @(*) begin  	//definindo oq fazer nos estados de forma combinacional
	case(estado_atual)
		sts1: begin				//BUS IDLE
			BRS = 1'b0;
			F_EOF = 1'b1;
			F_CRC = 1'b1;
			F_IDF = 1'b1;
			F_ACK_D = 1'b1;
			F_CRC_D = 1'b1;
		end
		sts3: begin				//IDENTIFIER
		end
		sts4: begin				//RTR
			RTR = RX;
		end
		sts5: begin				//IDE
			IDE = RX;
		end
		sts_B6: begin			//EDL Base
			F_IDF = 1'b0;		//A posição da FLAG de Identifier indica que já houve a separação na máquina de estado 
			EDL = RX;			//entre o Base e o Extended, e que logo o identificador correto (O de Base) já foi pego.
		end
		sts_E6: begin			//IDENTIFIER EXTENSION EXTENDED
		end
		  
	//---------------Estados de CAN BASE (BC)---------------//

		sts_BCD7: begin			//DLC CAN Data
			F_IDF = 1'b1;
		end
		sts_BCR7: begin			//DLC CAN Remote
			F_IDF = 1'b1;
		end
		sts_BCD8: begin			//DATA FIELD
		end
			
	//---------------Estados de CAN BASE FD (BF)---------------//

		sts_BF7: begin			//Dummy STATE
			F_IDF = 1'b1;
		end 
		sts_BF8: begin			//BRS
			BRS = RX;
		end
		sts_BF9: begin			//ESI
		end
		sts_BF10: begin			//DLC_FD
		end 
		sts_BF11: begin			//DATA_FIELD_FD
		end

	//---------------Estados de CAN EXTENDED (E)---------------//
	 
		sts_E7: begin  		//RTR_Extended
			RTR = RX;
			F_IDF = 1'b0;		//A posição da FLAG de Identifier indica que já houve a separação na máquina de estado entre
		end						//o Base e o Extended e que o identificador correto (O do frame Extended) já foi pego no estado anterior.
		sts_E8: begin			//EDL
			EDL = RX;
			F_IDF = 1'b1;
		end
		sts_E9: begin			//r0
		end

	//---------------Estados de CAN EXTENDED COMUM (EC)---------------//
		
		sts_ECD10: begin		//DLC EXTENDED DATA
		end
		sts_ECR10: begin		//DLC EXTENDED REMOTE
		end
		sts_ECD11: begin		//DATA FIELD
		end
		  
	//---------------Estados de CAN EXTENDED FD (EF)---------------//

		sts_EF10: begin		//BRS_FD
			BRS = RX;
		end
		sts_EF11: begin		//ESI_FD
		end
		sts_EF12: begin		//DLC_FD
		end 
		sts_EF13: begin	//DATA_FIELD_FD
		end
		  
	 //---------------Tratando estados finais---------------//
		 
		sts_I:	begin 			//DATA FIELD LB
			F_CRC = 1'b0;
		end
		sts_II: begin			//CRC
			F_CRC = 1'b1;
		end
		sts_III: begin			//CRC LB
			F_CRC_D = 1'b0;		//Avisando que o próximo estado é o Delimiter
		end
		sts_IV: begin			//CRC Delimiter
			F_CRC_D = 1'b1;
			BRS = 1'b0;
		end
		sts_V: begin				//ACK
			F_ACK_D = 1'b0;
		end
		sts_VI: begin			//ACK Delimiter
			F_ACK_D = 1'b1;
			F_EOF = 1'b0;
		end
		sts_VII: begin			//EOF
			F_EOF = 1'b1;
		end
		  
	//---------------Tratando INTERMISSION, ERROR e OVERLOAD---------------//   
		 
		sts_INT:begin			//INTERMISSION
		end
		sts_OVL:begin			//OVERLOAD AND ERROR
			BRS = 1'b0;
			F_EOF = 1'b1;
			F_CRC = 1'b1;
			F_IDF = 1'b1;
			F_ACK_D = 1'b1;
			F_CRC_D = 1'b1;
		end
	endcase
end
endmodule